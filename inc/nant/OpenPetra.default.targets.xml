<?xml version="1.0"?>
<project name="OpenPetra-default-targets">

<include buildfile="OpenPetra.common.xml"/>

<target name="deleteBakFiles" description="delete all backup files">
  <delete failonerror="false">
    <fileset defaultexcludes="false" basedir="${dir.root}/csharp/ICT">
      <include name="**/*~" />
      <include name="**/*.bak" />
      <include name="**/*.error" />
      <include name="**/*.yaml.xml" />
    </fileset>
  </delete>
  <delete>
    <fileset defaultexcludes="false" basedir="${dir.root}/webserver">
      <include name="**/*~" />
      <include name="**/*.bak" />
      <include name="**/*.error" />
      <include name="**/*.yaml.xml" />
    </fileset>
  </delete>
</target>

<target name="initConfigFiles-internal">
  <copy file="${templateFile}"
        tofile="${configFile}" overwrite="true" outputencoding="utf-8" if="${not file::exists(templateFile + '.my')}">
    <filterchain>
      <expandproperties />
    </filterchain>
  </copy>
  <property name="templateFile" value="${templateFile}.my"/>
  <copy file="${templateFile}"
        tofile="${configFile}" overwrite="true" outputencoding="utf-8" if="${file::exists(templateFile)}">
    <filterchain>
      <expandproperties />
    </filterchain>
  </copy>
</target>

<target name="initConfigFiles-server">
  <property name="templateFile" value="${dir.incdir.template.etc}/Server-${DBMS.Type}.config"/>

  <property name="configFile" value="${dir.delivery}/web.config"/> 
  <call target="initConfigFiles-internal"/>

  <property name="templateFile" value="${dir.incdir.template.etc}/TestServer.config"/>
  <property name="configFile" value="${path::combine(dir.etc, 'TestServer.config')}"/>
  <call target="initConfigFiles-internal"/>
  
<!-- MGR: TODO: Remove copy. Should be during database work! -->
  <copy file="${path::combine(dir.db, 'version.txt')}"
      tofile="${path::combine(dir.bin, 'version.txt')}" 
      overwrite="true"/>

  <mkdir dir="${dir.log}" failonerror="false"/>
</target>

<target name="initConfigFiles-admin">
  <property name="templateFile" value="${dir.incdir.template.etc}/ServerAdmin.config"/>
  <property name="configFile" value="${ServerAdminConfigFile}"/>
  <call target="initConfigFiles-internal"/>
</target>

<target name="initConfigFiles" depends="initConfigFiles-server, initConfigFiles-admin" description="write and overwrite the config files for server and testing, and the version.txt">
</target>

<target name="startPetraServer" description="Starts a local Petra Server">
    <call target="startServer"/>
</target>

<target name="startServer" description="Starts a local Petra Server">
  <call target="startServer-internal"/>
</target>

<target name="startServerBackground" description="Starts the OpenPetra Server in the background">
  <property name="spawnxsp" value="true" overwrite="true"/>
  <call target="startServer"/>
</target>

<target name="prepareDeliveryContent" description="copy some files to delivery directory for the server to start">
  <mkdir dir="${dir.delivery}/api" failonerror="false"/>

  <delete>
    <fileset basedir="${dir.delivery}/api">
      <include name="*.asmx" />
    </fileset>
  </delete>

  <!-- create symbolic links for asmx files -->
  <exec program="bash"
        workingdir="${dir.delivery}/api"
        commandline="-c &quot;for f in ${dir.csharp}/ICT/Petra/Server/app/WebService/*.asmx; do ln -s $f; done&quot;"/>

  <copy todir="${dir.delivery}/api" overwrite="true" flatten="true">
    <fileset basedir="${dir.csharp}/ICT/Petra/Plugins/">
      <include name="**/*.asmx" />
    </fileset>
  </copy>

  <!-- create symbolic link for version.txt -->
  <if test="${not file::exists(dir.bin + '/version.txt')}">
    <exec program="bash"
        workingdir="${dir.bin}"
        commandline="-c &quot;ln -s ../../db/version.txt&quot;"/>
  </if>

  <!-- create symbolic links for sql upgrade files -->
  <delete>
    <fileset basedir="${dir.csharp}/ICT/Petra/Server/sql">
      <include name="Upgrade*.sql" />
    </fileset>
  </delete>
  <exec program="bash"
        workingdir="${dir.csharp}/ICT/Petra/Server/sql"
        commandline="-c &quot;for f in ${dir.csharp}/ICT/Petra/Server/lib/MSysMan/DBUpgrades/*.sql; do ln -s $f; done&quot;"/>

  <if test="${'unix'==platform::get-name()}" >
      <!-- create symbolic link for api page -->
      <if test="${not file::exists(dir.delivery + '/api/Default.aspx')}">
        <exec program="bash"
            workingdir="${dir.delivery}/api"
            commandline="-c &quot;ln -s ../../csharp/ICT/Petra/Server/app/WebService/Default.aspx&quot;"/>
      </if>
      <!-- create symbolic links for the javascript client in delivery directory -->
      <if test="${not file::exists(dir.delivery + '/index.html')}">
        <exec program="bash"
            workingdir="${dir.delivery}"
            commandline="-c &quot;js=${dir.jsclient}; ln -s $js/img; ln -s $js/src; ln -s $js/css; ln -s $js/index.html&quot;"/>
      </if>
      <if test="${not file::exists(dir.bin + '/libsodium.so')}">
        <exec program="bash"
            workingdir="${dir.bin}"
            commandline="-c &quot;ln -s ${libsodium.so} libsodium.so&quot;"/>
      </if>
      <delete file="${dir.bin}/Mono.Security.dll" failonerror="false"/>
      <delete file="${dir.bin}/libsodium.dll"/>
      <delete file="${dir.bin}/libsodium-64.dll"/>
  </if>
</target>

<target name="startServer-internal" depends="initConfigFiles-server, copySQLFiles, prepareDeliveryContent" description="Starts a local Petra Server">
  <if test="${'unix'==platform::get-name()}" >
      <echo message="in your browser, go to http://localhost:${Server.Port}/"/>
      <echo message="   for the api,  go to http://localhost:${Server.Port}/api/"/>
      <property name="spawnxsp" value="false" overwrite="false"/>
      <exec program="xsp4" 
              workingdir="${dir.delivery}"
              commandline="--verbose --nonstop --root . --port ${Server.Port} --applications /:."
              spawn="${spawnxsp}">
        <environment>
          <variable name="LD_LIBRARY_PATH" path="${dir.bin}"/>
          <variable name="PATH" path="${environment::get-variable('PATH')};"/>
          <variable name="MONO_OPTIONS" value="--debug"/>
        </environment>
      </exec>
  </if>
</target>

<target name="copySQLFiles" description="copy the sql files from server and from plugins">
    <mkdir dir="${dir.bin}/sql30" failonerror="false"/>
    <copy todir="${dir.bin}/sql30">
      <fileset basedir="${dir.root}/csharp/ICT/Petra/Server/sql/">
          <include name="*.sql" />
          <include name="*.yml" />
      </fileset>
    </copy>
    <foreach item="File" property="filename">
        <in>
            <items>
                <include name="${dir.root}/csharp/ICT/Petra/Plugins/**/sql/*.sql" />
            </items>
        </in>
        <do>
            <copy file="${filename}" tofile="${dir.bin}/sql30/${path::get-file-name(filename)}"/>
        </do>
    </foreach>
</target>

<target name="stopPetraServer" description="stop the local OpenPetra Server">
    <call target="stopServer"/>
</target>
<target name="stop" description="stop the local OpenPetra Server">
    <call target="stopServer"/>
</target>

<target name="stopServer" depends="initConfigFiles-admin" description="stop the local OpenPetra Server">
  <if test="${'unix'==platform::get-name()}" >
      <exec program="${MonoExecutable.file}" 
              workingdir="${dir.bin}"
              commandline="PetraServerAdminConsole.exe -Command:Stop -C:${ServerAdminConfigFile}"
              spawn="false">
         <environment>
            <variable name="LANGUAGE" value="${SelectedLanguage}"/>
         </environment>
      </exec>
  </if>
</target>

<target name="startAdminConsole">
  <call target="startAdmin"/>
</target>
<target name="startAdmin" depends="initConfigFiles-admin" description="start the OpenPetra Server Admin Console"> 
  <if test="${'unix'==platform::get-name()}">
    <property name="Command" value="menu" overwrite="false"/>
    <if test="${Command=='menu'}">
      <echo message="run this directly from the command line:"/>
      <echo message="/home/op_dev/openpetra-server.sh menu"/>
      <!-- exec does not really work within nant, Console.Write does not print -->
    </if>
    <if test="${Command!='menu'}">
      <echo message="running: mono PetraServerAdminConsole.exe -Command:${Command} -C:${ServerAdminConfigFile}"/>
      <exec program="${MonoExecutable.file}" 
              workingdir="${dir.bin}"
              commandline="PetraServerAdminConsole.exe -Command:${Command} -C:${ServerAdminConfigFile}"
              spawn="false">
         <environment>
            <variable name="LANGUAGE" value="${SelectedLanguage}"/>
         </environment>
      </exec>
    </if>
  </if>
</target> 

<target name="start" depends="initConfigFiles, startServerBackground">
</target>

</project>
